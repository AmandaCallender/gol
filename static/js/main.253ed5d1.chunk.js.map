{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["neighborOps","emptyGrid","rows","i","push","Array","from","App","useState","running","setRunning","grid","setGrid","runningRef","useRef","current","runGame","useCallback","g","produce","gridCopy","j","neighbors","forEach","x","y","newI","newJ","setTimeout","class","style","display","gridTemplateColumns","map","col","c","key","onClick","newGrid","width","height","backgroundColor","undefined","border","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.253ed5d1.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\nimport produce from \"immer\";\nimport \"./App.css\";\n\nconst numRows = 30;\nconst numColumns = 50;\n\n//operations for checking neighbors across the grid\nconst neighborOps = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\n\nconst emptyGrid = () => {\n  const rows = [];\n  // creating the grid!\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numColumns), () => 0));\n  }\n  return rows;\n};\n\nfunction App() {\n  const [running, setRunning] = useState(false);\n  // const [speed, setSpeed] = useState(1000);\n  const [grid, setGrid] = useState(() => {\n    return emptyGrid();\n  });\n\n  //This gives us our current value for the running state while being mutable\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const runGame = useCallback(() => {\n    //If we are not running, end the function.\n    if (!runningRef.current) {\n      return;\n    }\n    //Otherwise, call the function recursively to update the state\n\n    setGrid((g) => {\n      // the current grid is set to g\n      return produce(g, (gridCopy) => {\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numColumns; j++) {\n            //Figure out how many neighbors each cell has\n            let neighbors = 0;\n            neighborOps.forEach(([x, y]) => {\n              const newI = i + x;\n              const newJ = j + y;\n              //check the bounds of your grid to make sure you don't go above or below\n              if (\n                newI >= 0 &&\n                newI < numRows &&\n                newJ >= 0 &&\n                newJ < numColumns\n              ) {\n                neighbors += g[newI][newJ];\n              }\n            });\n            //if the current cell is dead, but has 3 neighbors it comes alive\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][j] = 0;\n            } else if (g[i][j] === 0 && neighbors === 3) {\n              gridCopy[i][j] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runGame);\n  }, []);\n\n  return (\n    <div class=\"page-container\">\n      <h1>Game Of Life</h1>\n      <div\n        class=\"grid-display\"\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numColumns}, 20px`,\n        }}\n      >\n        {/* This creates the grid by mapping over our rows. \n      I is the index of our rows, c is the index of our columns  */}\n        {grid.map((rows, i) =>\n          rows.map((col, c) => (\n            <div\n              key={`${i}-${c}`}\n              //This sets the index of the clicked grid to 'alive'\n              onClick={() => {\n                const newGrid = produce(grid, (gridCopy) => {\n                  gridCopy[i][c] = grid[i][c] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[i][c] ? \"cyan\" : undefined,\n                border: \"solid 1px purple\",\n              }}\n            />\n          ))\n        )}\n      </div>\n      <div class=\"button-container\">\n        {/* <button\n          onClick={() => {\n            if (speed <= 5000) {\n              setSpeed(speed + 100);\n              console.log(speed);\n            }\n          }}\n        >\n          <i class=\"fas fa-backward\" />\n        </button> */} \n        {/*changes the state to determine whether the game is running or not*/}\n        <button\n          onClick={() => {\n            setRunning(!running);\n            if (!running) {\n              runningRef.current = true;\n              runGame();\n            }\n          }}\n        >\n          {running ? <i class=\"fas fa-pause\" /> : <i class=\"fas fa-play\" />}\n        </button>\n        {/* <button\n          onClick={() => {\n            if (speed >= 100) {\n              setSpeed(speed - 100);\n              console.log(speed);\n            }\n          }}\n        >\n          <i class=\"fas fa-fast-forward\" />\n        </button> */}\n        <button\n          onClick={() => {\n            setGrid(emptyGrid());\n          }}\n        >\n          <i class=\"fas fa-redo\" />\n        </button>\n        <button\n          onClick={() => {\n            const rows = [];\n            for (let i = 0; i < numRows; i++) {\n              rows.push(\n                Array.from(Array(numColumns), () =>\n                  Math.random() > 0.8 ? 1 : 0\n                )\n              );\n            }\n\n            setGrid(rows);\n          }}\n        >\n          <i class=\"fas fa-question\" />\n        </button>\n      </div>\n      <div class=\"description\">\n        <div>\n          <h2>Description</h2>\n          <ul>\n            <p>Any live cell with two or three live neighbours survives.</p>\n            <p>\n              Any dead cell with three live neighbours becomes a live cell.\n            </p>\n            <p>\n              All other live cells die in the next generation. Similarly, all\n              other dead cells stay dead.\n            </p>\n          </ul>\n        </div>\n      </div>\n      <div class=\"description\">\n        <div>\n          <h2>Instructions</h2>\n          <ol>\n            <li>Click on any cell to make it \"alive\".</li>\n            <li>Click play to see how your simulation plays out!</li>\n            <li>\n              You can change the speed, and even create a random simulation using the\n              buttons.\n            </li>\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}